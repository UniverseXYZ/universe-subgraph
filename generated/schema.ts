// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AuctionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionEntity", id.toString(), this);
  }

  static load(id: string): AuctionEntity | null {
    return store.get("AuctionEntity", id) as AuctionEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auctionId(): BigInt {
    let value = this.get("auctionId");
    return value.toBigInt();
  }

  set auctionId(value: BigInt) {
    this.set("auctionId", Value.fromBigInt(value));
  }

  get auctionOwner(): Bytes {
    let value = this.get("auctionOwner");
    return value.toBytes();
  }

  set auctionOwner(value: Bytes) {
    this.set("auctionOwner", Value.fromBytes(value));
  }

  get numberOfSlots(): BigInt {
    let value = this.get("numberOfSlots");
    return value.toBigInt();
  }

  set numberOfSlots(value: BigInt) {
    this.set("numberOfSlots", Value.fromBigInt(value));
  }

  get startBlockNumber(): BigInt {
    let value = this.get("startBlockNumber");
    return value.toBigInt();
  }

  set startBlockNumber(value: BigInt) {
    this.set("startBlockNumber", Value.fromBigInt(value));
  }

  get endBlockNumber(): BigInt {
    let value = this.get("endBlockNumber");
    return value.toBigInt();
  }

  set endBlockNumber(value: BigInt) {
    this.set("endBlockNumber", Value.fromBigInt(value));
  }

  get resetTimer(): BigInt {
    let value = this.get("resetTimer");
    return value.toBigInt();
  }

  set resetTimer(value: BigInt) {
    this.set("resetTimer", Value.fromBigInt(value));
  }

  get supportsWhitelist(): boolean {
    let value = this.get("supportsWhitelist");
    return value.toBoolean();
  }

  set supportsWhitelist(value: boolean) {
    this.set("supportsWhitelist", Value.fromBoolean(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class LogBidSubmittedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LogBidSubmittedEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogBidSubmittedEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogBidSubmittedEntity", id.toString(), this);
  }

  static load(id: string): LogBidSubmittedEntity | null {
    return store.get(
      "LogBidSubmittedEntity",
      id
    ) as LogBidSubmittedEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get auctionId(): BigInt {
    let value = this.get("auctionId");
    return value.toBigInt();
  }

  set auctionId(value: BigInt) {
    this.set("auctionId", Value.fromBigInt(value));
  }

  get currentBid(): BigInt {
    let value = this.get("currentBid");
    return value.toBigInt();
  }

  set currentBid(value: BigInt) {
    this.set("currentBid", Value.fromBigInt(value));
  }

  get totalBid(): BigInt {
    let value = this.get("totalBid");
    return value.toBigInt();
  }

  set totalBid(value: BigInt) {
    this.set("totalBid", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}
