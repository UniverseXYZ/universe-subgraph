// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogAuctionCanceled extends ethereum.Event {
  get params(): LogAuctionCanceled__Params {
    return new LogAuctionCanceled__Params(this);
  }
}

export class LogAuctionCanceled__Params {
  _event: LogAuctionCanceled;

  constructor(event: LogAuctionCanceled) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogAuctionCreated extends ethereum.Event {
  get params(): LogAuctionCreated__Params {
    return new LogAuctionCreated__Params(this);
  }
}

export class LogAuctionCreated__Params {
  _event: LogAuctionCreated;

  constructor(event: LogAuctionCreated) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auctionOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get numberOfSlots(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get startBlockNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endBlockNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get resetTimer(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get supportsWhitelist(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get time(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class LogAuctionExtended extends ethereum.Event {
  get params(): LogAuctionExtended__Params {
    return new LogAuctionExtended__Params(this);
  }
}

export class LogAuctionExtended__Params {
  _event: LogAuctionExtended;

  constructor(event: LogAuctionExtended) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get endBlockNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogAuctionRevenueWithdrawal extends ethereum.Event {
  get params(): LogAuctionRevenueWithdrawal__Params {
    return new LogAuctionRevenueWithdrawal__Params(this);
  }
}

export class LogAuctionRevenueWithdrawal__Params {
  _event: LogAuctionRevenueWithdrawal;

  constructor(event: LogAuctionRevenueWithdrawal) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogBidMatched extends ethereum.Event {
  get params(): LogBidMatched__Params {
    return new LogBidMatched__Params(this);
  }
}

export class LogBidMatched__Params {
  _event: LogBidMatched;

  constructor(event: LogBidMatched) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get slotIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get slotReservePrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winningBidAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LogBidSubmitted extends ethereum.Event {
  get params(): LogBidSubmitted__Params {
    return new LogBidSubmitted__Params(this);
  }
}

export class LogBidSubmitted__Params {
  _event: LogBidSubmitted;

  constructor(event: LogBidSubmitted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currentBid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogBidWithdrawal extends ethereum.Event {
  get params(): LogBidWithdrawal__Params {
    return new LogBidWithdrawal__Params(this);
  }
}

export class LogBidWithdrawal__Params {
  _event: LogBidWithdrawal;

  constructor(event: LogBidWithdrawal) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogERC721Deposit extends ethereum.Event {
  get params(): LogERC721Deposit__Params {
    return new LogERC721Deposit__Params(this);
  }
}

export class LogERC721Deposit__Params {
  _event: LogERC721Deposit;

  constructor(event: LogERC721Deposit) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auctionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get slotIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nftSlotIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class LogERC721RewardsClaim extends ethereum.Event {
  get params(): LogERC721RewardsClaim__Params {
    return new LogERC721RewardsClaim__Params(this);
  }
}

export class LogERC721RewardsClaim__Params {
  _event: LogERC721RewardsClaim;

  constructor(event: LogERC721RewardsClaim) {
    this._event = event;
  }

  get claimer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get slotIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogERC721Withdrawal extends ethereum.Event {
  get params(): LogERC721Withdrawal__Params {
    return new LogERC721Withdrawal__Params(this);
  }
}

export class LogERC721Withdrawal__Params {
  _event: LogERC721Withdrawal;

  constructor(event: LogERC721Withdrawal) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auctionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get slotIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nftSlotIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class LogRoyaltiesWithdrawal extends ethereum.Event {
  get params(): LogRoyaltiesWithdrawal__Params {
    return new LogRoyaltiesWithdrawal__Params(this);
  }
}

export class LogRoyaltiesWithdrawal__Params {
  _event: LogRoyaltiesWithdrawal;

  constructor(event: LogRoyaltiesWithdrawal) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract__auctionsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;
  value9: boolean;
  value10: Address;
  value11: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
    value9: boolean,
    value10: Address,
    value11: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    map.set("value11", ethereum.Value.fromBoolean(this.value11));
    return map;
  }
}

export class Contract__getDepositedNftsInSlotResultValue0Struct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get depositor(): Address {
    return this[2].toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  auctions(param0: BigInt): Contract__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__auctionsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean(),
      result[10].toAddress(),
      result[11].toBoolean()
    );
  }

  try_auctions(param0: BigInt): ethereum.CallResult<Contract__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__auctionsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean(),
        value[10].toAddress(),
        value[11].toBoolean()
      )
    );
  }

  auctionsRevenue(param0: BigInt): BigInt {
    let result = super.call(
      "auctionsRevenue",
      "auctionsRevenue(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_auctionsRevenue(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionsRevenue",
      "auctionsRevenue(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelAuction(_auctionId: BigInt): boolean {
    let result = super.call("cancelAuction", "cancelAuction(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_auctionId)
    ]);

    return result[0].toBoolean();
  }

  try_cancelAuction(_auctionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelAuction",
      "cancelAuction(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimERC721Rewards(auctionId: BigInt, slotIndex: BigInt): boolean {
    let result = super.call(
      "claimERC721Rewards",
      "claimERC721Rewards(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_claimERC721Rewards(
    auctionId: BigInt,
    slotIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimERC721Rewards",
      "claimERC721Rewards(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createAuction(
    _startBlockNumber: BigInt,
    _endBlockNumber: BigInt,
    _resetTimer: BigInt,
    _numberOfSlots: BigInt,
    _supportsWhitelist: boolean,
    _bidToken: Address
  ): BigInt {
    let result = super.call(
      "createAuction",
      "createAuction(uint256,uint256,uint256,uint256,bool,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_startBlockNumber),
        ethereum.Value.fromUnsignedBigInt(_endBlockNumber),
        ethereum.Value.fromUnsignedBigInt(_resetTimer),
        ethereum.Value.fromUnsignedBigInt(_numberOfSlots),
        ethereum.Value.fromBoolean(_supportsWhitelist),
        ethereum.Value.fromAddress(_bidToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_createAuction(
    _startBlockNumber: BigInt,
    _endBlockNumber: BigInt,
    _resetTimer: BigInt,
    _numberOfSlots: BigInt,
    _supportsWhitelist: boolean,
    _bidToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAuction",
      "createAuction(uint256,uint256,uint256,uint256,bool,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_startBlockNumber),
        ethereum.Value.fromUnsignedBigInt(_endBlockNumber),
        ethereum.Value.fromUnsignedBigInt(_resetTimer),
        ethereum.Value.fromUnsignedBigInt(_numberOfSlots),
        ethereum.Value.fromBoolean(_supportsWhitelist),
        ethereum.Value.fromAddress(_bidToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositERC721(
    _auctionId: BigInt,
    _slotIndex: BigInt,
    _tokenId: BigInt,
    _tokenAddress: Address
  ): BigInt {
    let result = super.call(
      "depositERC721",
      "depositERC721(uint256,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_slotIndex),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_tokenAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositERC721(
    _auctionId: BigInt,
    _slotIndex: BigInt,
    _tokenId: BigInt,
    _tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositERC721",
      "depositERC721(uint256,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_slotIndex),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositMultipleERC721(
    _auctionId: BigInt,
    _slotIndex: BigInt,
    _tokenIds: Array<BigInt>,
    _tokenAddress: Address
  ): Array<BigInt> {
    let result = super.call(
      "depositMultipleERC721",
      "depositMultipleERC721(uint256,uint256,uint256[],address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_slotIndex),
        ethereum.Value.fromUnsignedBigIntArray(_tokenIds),
        ethereum.Value.fromAddress(_tokenAddress)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_depositMultipleERC721(
    _auctionId: BigInt,
    _slotIndex: BigInt,
    _tokenIds: Array<BigInt>,
    _tokenAddress: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "depositMultipleERC721",
      "depositMultipleERC721(uint256,uint256,uint256[],address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_slotIndex),
        ethereum.Value.fromUnsignedBigIntArray(_tokenIds),
        ethereum.Value.fromAddress(_tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  erc20Bid(_auctionId: BigInt, _amount: BigInt): boolean {
    let result = super.call("erc20Bid", "erc20Bid(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_auctionId),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_erc20Bid(
    _auctionId: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("erc20Bid", "erc20Bid(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_auctionId),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  finalizeAuction(auctionId: BigInt, bidders: Array<Address>): boolean {
    let result = super.call(
      "finalizeAuction",
      "finalizeAuction(uint256,address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddressArray(bidders)
      ]
    );

    return result[0].toBoolean();
  }

  try_finalizeAuction(
    auctionId: BigInt,
    bidders: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "finalizeAuction",
      "finalizeAuction(uint256,address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddressArray(bidders)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBidderBalance(auctionId: BigInt, bidder: Address): BigInt {
    let result = super.call(
      "getBidderBalance",
      "getBidderBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddress(bidder)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBidderBalance(
    auctionId: BigInt,
    bidder: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBidderBalance",
      "getBidderBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddress(bidder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDepositedNftsInSlot(
    auctionId: BigInt,
    slotIndex: BigInt
  ): Array<Contract__getDepositedNftsInSlotResultValue0Struct> {
    let result = super.call(
      "getDepositedNftsInSlot",
      "getDepositedNftsInSlot(uint256,uint256):((address,uint256,address)[])",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex)
      ]
    );

    return result[0].toTupleArray<
      Contract__getDepositedNftsInSlotResultValue0Struct
    >();
  }

  try_getDepositedNftsInSlot(
    auctionId: BigInt,
    slotIndex: BigInt
  ): ethereum.CallResult<
    Array<Contract__getDepositedNftsInSlotResultValue0Struct>
  > {
    let result = super.tryCall(
      "getDepositedNftsInSlot",
      "getDepositedNftsInSlot(uint256,uint256):((address,uint256,address)[])",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Contract__getDepositedNftsInSlotResultValue0Struct
      >()
    );
  }

  getMinimumReservePriceForSlot(auctionId: BigInt, slotIndex: BigInt): BigInt {
    let result = super.call(
      "getMinimumReservePriceForSlot",
      "getMinimumReservePriceForSlot(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMinimumReservePriceForSlot(
    auctionId: BigInt,
    slotIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumReservePriceForSlot",
      "getMinimumReservePriceForSlot(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSlotWinner(auctionId: BigInt, slotIndex: BigInt): Address {
    let result = super.call(
      "getSlotWinner",
      "getSlotWinner(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex)
      ]
    );

    return result[0].toAddress();
  }

  try_getSlotWinner(
    auctionId: BigInt,
    slotIndex: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSlotWinner",
      "getSlotWinner(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAddressWhitelisted(auctionId: BigInt, addressToCheck: Address): boolean {
    let result = super.call(
      "isAddressWhitelisted",
      "isAddressWhitelisted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddress(addressToCheck)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAddressWhitelisted(
    auctionId: BigInt,
    addressToCheck: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAddressWhitelisted",
      "isAddressWhitelisted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddress(addressToCheck)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxNumberOfSlotsPerAuction(): BigInt {
    let result = super.call(
      "maxNumberOfSlotsPerAuction",
      "maxNumberOfSlotsPerAuction():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxNumberOfSlotsPerAuction(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxNumberOfSlotsPerAuction",
      "maxNumberOfSlotsPerAuction():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltiesReserve(param0: Address): BigInt {
    let result = super.call(
      "royaltiesReserve",
      "royaltiesReserve(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_royaltiesReserve(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "royaltiesReserve",
      "royaltiesReserve(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royaltyFeeMantissa(): BigInt {
    let result = super.call(
      "royaltyFeeMantissa",
      "royaltyFeeMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_royaltyFeeMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "royaltyFeeMantissa",
      "royaltyFeeMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setMinimumReserveForAuctionSlots(
    auctionId: BigInt,
    minimumReserveValues: Array<BigInt>
  ): boolean {
    let result = super.call(
      "setMinimumReserveForAuctionSlots",
      "setMinimumReserveForAuctionSlots(uint256,uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigIntArray(minimumReserveValues)
      ]
    );

    return result[0].toBoolean();
  }

  try_setMinimumReserveForAuctionSlots(
    auctionId: BigInt,
    minimumReserveValues: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setMinimumReserveForAuctionSlots",
      "setMinimumReserveForAuctionSlots(uint256,uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigIntArray(minimumReserveValues)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setRoyaltyFeeMantissa(_royaltyFeeMantissa: BigInt): BigInt {
    let result = super.call(
      "setRoyaltyFeeMantissa",
      "setRoyaltyFeeMantissa(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_royaltyFeeMantissa)]
    );

    return result[0].toBigInt();
  }

  try_setRoyaltyFeeMantissa(
    _royaltyFeeMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setRoyaltyFeeMantissa",
      "setRoyaltyFeeMantissa(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_royaltyFeeMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAuctions(): BigInt {
    let result = super.call("totalAuctions", "totalAuctions():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAuctions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAuctions",
      "totalAuctions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistMultipleAddresses(
    auctionId: BigInt,
    addressesToWhitelist: Array<Address>
  ): boolean {
    let result = super.call(
      "whitelistMultipleAddresses",
      "whitelistMultipleAddresses(uint256,address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddressArray(addressesToWhitelist)
      ]
    );

    return result[0].toBoolean();
  }

  try_whitelistMultipleAddresses(
    auctionId: BigInt,
    addressesToWhitelist: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistMultipleAddresses",
      "whitelistMultipleAddresses(uint256,address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddressArray(addressesToWhitelist)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawAuctionRevenue(auctionId: BigInt): boolean {
    let result = super.call(
      "withdrawAuctionRevenue",
      "withdrawAuctionRevenue(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return result[0].toBoolean();
  }

  try_withdrawAuctionRevenue(auctionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawAuctionRevenue",
      "withdrawAuctionRevenue(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawDepositedERC721(
    auctionId: BigInt,
    slotIndex: BigInt,
    nftSlotIndex: BigInt
  ): boolean {
    let result = super.call(
      "withdrawDepositedERC721",
      "withdrawDepositedERC721(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex),
        ethereum.Value.fromUnsignedBigInt(nftSlotIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawDepositedERC721(
    auctionId: BigInt,
    slotIndex: BigInt,
    nftSlotIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawDepositedERC721",
      "withdrawDepositedERC721(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex),
        ethereum.Value.fromUnsignedBigInt(nftSlotIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawERC20Bid(auctionId: BigInt): boolean {
    let result = super.call(
      "withdrawERC20Bid",
      "withdrawERC20Bid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return result[0].toBoolean();
  }

  try_withdrawERC20Bid(auctionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawERC20Bid",
      "withdrawERC20Bid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawERC721FromNonWinningSlot(
    auctionId: BigInt,
    slotIndex: BigInt,
    nftSlotIndex: BigInt
  ): boolean {
    let result = super.call(
      "withdrawERC721FromNonWinningSlot",
      "withdrawERC721FromNonWinningSlot(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex),
        ethereum.Value.fromUnsignedBigInt(nftSlotIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawERC721FromNonWinningSlot(
    auctionId: BigInt,
    slotIndex: BigInt,
    nftSlotIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawERC721FromNonWinningSlot",
      "withdrawERC721FromNonWinningSlot(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(slotIndex),
        ethereum.Value.fromUnsignedBigInt(nftSlotIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawEthBid(_auctionId: BigInt): boolean {
    let result = super.call(
      "withdrawEthBid",
      "withdrawEthBid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );

    return result[0].toBoolean();
  }

  try_withdrawEthBid(_auctionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawEthBid",
      "withdrawEthBid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawRoyalties(_token: Address, _to: Address): BigInt {
    let result = super.call(
      "withdrawRoyalties",
      "withdrawRoyalties(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token), ethereum.Value.fromAddress(_to)]
    );

    return result[0].toBigInt();
  }

  try_withdrawRoyalties(
    _token: Address,
    _to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawRoyalties",
      "withdrawRoyalties(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token), ethereum.Value.fromAddress(_to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _maxNumberOfSlotsPerAuction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimERC721RewardsCall extends ethereum.Call {
  get inputs(): ClaimERC721RewardsCall__Inputs {
    return new ClaimERC721RewardsCall__Inputs(this);
  }

  get outputs(): ClaimERC721RewardsCall__Outputs {
    return new ClaimERC721RewardsCall__Outputs(this);
  }
}

export class ClaimERC721RewardsCall__Inputs {
  _call: ClaimERC721RewardsCall;

  constructor(call: ClaimERC721RewardsCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get slotIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimERC721RewardsCall__Outputs {
  _call: ClaimERC721RewardsCall;

  constructor(call: ClaimERC721RewardsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get _startBlockNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _endBlockNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _resetTimer(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _numberOfSlots(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _supportsWhitelist(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _bidToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositERC721Call extends ethereum.Call {
  get inputs(): DepositERC721Call__Inputs {
    return new DepositERC721Call__Inputs(this);
  }

  get outputs(): DepositERC721Call__Outputs {
    return new DepositERC721Call__Outputs(this);
  }
}

export class DepositERC721Call__Inputs {
  _call: DepositERC721Call;

  constructor(call: DepositERC721Call) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slotIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class DepositERC721Call__Outputs {
  _call: DepositERC721Call;

  constructor(call: DepositERC721Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositMultipleERC721Call extends ethereum.Call {
  get inputs(): DepositMultipleERC721Call__Inputs {
    return new DepositMultipleERC721Call__Inputs(this);
  }

  get outputs(): DepositMultipleERC721Call__Outputs {
    return new DepositMultipleERC721Call__Outputs(this);
  }
}

export class DepositMultipleERC721Call__Inputs {
  _call: DepositMultipleERC721Call;

  constructor(call: DepositMultipleERC721Call) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slotIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class DepositMultipleERC721Call__Outputs {
  _call: DepositMultipleERC721Call;

  constructor(call: DepositMultipleERC721Call) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class Erc20BidCall extends ethereum.Call {
  get inputs(): Erc20BidCall__Inputs {
    return new Erc20BidCall__Inputs(this);
  }

  get outputs(): Erc20BidCall__Outputs {
    return new Erc20BidCall__Outputs(this);
  }
}

export class Erc20BidCall__Inputs {
  _call: Erc20BidCall;

  constructor(call: Erc20BidCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Erc20BidCall__Outputs {
  _call: Erc20BidCall;

  constructor(call: Erc20BidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EthBidCall extends ethereum.Call {
  get inputs(): EthBidCall__Inputs {
    return new EthBidCall__Inputs(this);
  }

  get outputs(): EthBidCall__Outputs {
    return new EthBidCall__Outputs(this);
  }
}

export class EthBidCall__Inputs {
  _call: EthBidCall;

  constructor(call: EthBidCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EthBidCall__Outputs {
  _call: EthBidCall;

  constructor(call: EthBidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FinalizeAuctionCall extends ethereum.Call {
  get inputs(): FinalizeAuctionCall__Inputs {
    return new FinalizeAuctionCall__Inputs(this);
  }

  get outputs(): FinalizeAuctionCall__Outputs {
    return new FinalizeAuctionCall__Outputs(this);
  }
}

export class FinalizeAuctionCall__Inputs {
  _call: FinalizeAuctionCall;

  constructor(call: FinalizeAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidders(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class FinalizeAuctionCall__Outputs {
  _call: FinalizeAuctionCall;

  constructor(call: FinalizeAuctionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMinimumReserveForAuctionSlotsCall extends ethereum.Call {
  get inputs(): SetMinimumReserveForAuctionSlotsCall__Inputs {
    return new SetMinimumReserveForAuctionSlotsCall__Inputs(this);
  }

  get outputs(): SetMinimumReserveForAuctionSlotsCall__Outputs {
    return new SetMinimumReserveForAuctionSlotsCall__Outputs(this);
  }
}

export class SetMinimumReserveForAuctionSlotsCall__Inputs {
  _call: SetMinimumReserveForAuctionSlotsCall;

  constructor(call: SetMinimumReserveForAuctionSlotsCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minimumReserveValues(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetMinimumReserveForAuctionSlotsCall__Outputs {
  _call: SetMinimumReserveForAuctionSlotsCall;

  constructor(call: SetMinimumReserveForAuctionSlotsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetRoyaltyFeeMantissaCall extends ethereum.Call {
  get inputs(): SetRoyaltyFeeMantissaCall__Inputs {
    return new SetRoyaltyFeeMantissaCall__Inputs(this);
  }

  get outputs(): SetRoyaltyFeeMantissaCall__Outputs {
    return new SetRoyaltyFeeMantissaCall__Outputs(this);
  }
}

export class SetRoyaltyFeeMantissaCall__Inputs {
  _call: SetRoyaltyFeeMantissaCall;

  constructor(call: SetRoyaltyFeeMantissaCall) {
    this._call = call;
  }

  get _royaltyFeeMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRoyaltyFeeMantissaCall__Outputs {
  _call: SetRoyaltyFeeMantissaCall;

  constructor(call: SetRoyaltyFeeMantissaCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WhitelistMultipleAddressesCall extends ethereum.Call {
  get inputs(): WhitelistMultipleAddressesCall__Inputs {
    return new WhitelistMultipleAddressesCall__Inputs(this);
  }

  get outputs(): WhitelistMultipleAddressesCall__Outputs {
    return new WhitelistMultipleAddressesCall__Outputs(this);
  }
}

export class WhitelistMultipleAddressesCall__Inputs {
  _call: WhitelistMultipleAddressesCall;

  constructor(call: WhitelistMultipleAddressesCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get addressesToWhitelist(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class WhitelistMultipleAddressesCall__Outputs {
  _call: WhitelistMultipleAddressesCall;

  constructor(call: WhitelistMultipleAddressesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawAuctionRevenueCall extends ethereum.Call {
  get inputs(): WithdrawAuctionRevenueCall__Inputs {
    return new WithdrawAuctionRevenueCall__Inputs(this);
  }

  get outputs(): WithdrawAuctionRevenueCall__Outputs {
    return new WithdrawAuctionRevenueCall__Outputs(this);
  }
}

export class WithdrawAuctionRevenueCall__Inputs {
  _call: WithdrawAuctionRevenueCall;

  constructor(call: WithdrawAuctionRevenueCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawAuctionRevenueCall__Outputs {
  _call: WithdrawAuctionRevenueCall;

  constructor(call: WithdrawAuctionRevenueCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawDepositedERC721Call extends ethereum.Call {
  get inputs(): WithdrawDepositedERC721Call__Inputs {
    return new WithdrawDepositedERC721Call__Inputs(this);
  }

  get outputs(): WithdrawDepositedERC721Call__Outputs {
    return new WithdrawDepositedERC721Call__Outputs(this);
  }
}

export class WithdrawDepositedERC721Call__Inputs {
  _call: WithdrawDepositedERC721Call;

  constructor(call: WithdrawDepositedERC721Call) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get slotIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nftSlotIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawDepositedERC721Call__Outputs {
  _call: WithdrawDepositedERC721Call;

  constructor(call: WithdrawDepositedERC721Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawERC20BidCall extends ethereum.Call {
  get inputs(): WithdrawERC20BidCall__Inputs {
    return new WithdrawERC20BidCall__Inputs(this);
  }

  get outputs(): WithdrawERC20BidCall__Outputs {
    return new WithdrawERC20BidCall__Outputs(this);
  }
}

export class WithdrawERC20BidCall__Inputs {
  _call: WithdrawERC20BidCall;

  constructor(call: WithdrawERC20BidCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawERC20BidCall__Outputs {
  _call: WithdrawERC20BidCall;

  constructor(call: WithdrawERC20BidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawERC721FromNonWinningSlotCall extends ethereum.Call {
  get inputs(): WithdrawERC721FromNonWinningSlotCall__Inputs {
    return new WithdrawERC721FromNonWinningSlotCall__Inputs(this);
  }

  get outputs(): WithdrawERC721FromNonWinningSlotCall__Outputs {
    return new WithdrawERC721FromNonWinningSlotCall__Outputs(this);
  }
}

export class WithdrawERC721FromNonWinningSlotCall__Inputs {
  _call: WithdrawERC721FromNonWinningSlotCall;

  constructor(call: WithdrawERC721FromNonWinningSlotCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get slotIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nftSlotIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawERC721FromNonWinningSlotCall__Outputs {
  _call: WithdrawERC721FromNonWinningSlotCall;

  constructor(call: WithdrawERC721FromNonWinningSlotCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawEthBidCall extends ethereum.Call {
  get inputs(): WithdrawEthBidCall__Inputs {
    return new WithdrawEthBidCall__Inputs(this);
  }

  get outputs(): WithdrawEthBidCall__Outputs {
    return new WithdrawEthBidCall__Outputs(this);
  }
}

export class WithdrawEthBidCall__Inputs {
  _call: WithdrawEthBidCall;

  constructor(call: WithdrawEthBidCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawEthBidCall__Outputs {
  _call: WithdrawEthBidCall;

  constructor(call: WithdrawEthBidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawRoyaltiesCall extends ethereum.Call {
  get inputs(): WithdrawRoyaltiesCall__Inputs {
    return new WithdrawRoyaltiesCall__Inputs(this);
  }

  get outputs(): WithdrawRoyaltiesCall__Outputs {
    return new WithdrawRoyaltiesCall__Outputs(this);
  }
}

export class WithdrawRoyaltiesCall__Inputs {
  _call: WithdrawRoyaltiesCall;

  constructor(call: WithdrawRoyaltiesCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawRoyaltiesCall__Outputs {
  _call: WithdrawRoyaltiesCall;

  constructor(call: WithdrawRoyaltiesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
